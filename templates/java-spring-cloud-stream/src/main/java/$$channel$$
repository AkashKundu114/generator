{%- set topicInfo = [channelName, channel] | topicInfo %}
{%- set queueInfo = [channelName, channel, topicInfo.subscribeTopic] | queueInfo %}
{%- set className = channel.json()['x-java-class'] -%}
{%- set bindingClassName = [channelName, channel] | bindingClassName -%}
{%- set bindingName = bindingClassName | lowerFirst -%}
{%- set messageClass = [channelName, channel] | messageClass -%}
{%- set payloadClass = [channelName, channel] | payloadClass -%}
{%- set lowerPayloadName = payloadClass | lowerFirst %}
{%- set contentType = channel | contentType -%}
{%- include '.partials/java-package' -%}
{% if channel.hasPublish() -%}
import org.springframework.beans.factory.annotation.Autowired;
{% endif %}
import org.springframework.cloud.stream.annotation.EnableBinding;
{% if channel.hasSubscribe() -%}
import org.springframework.cloud.stream.annotation.Input;
{% endif -%}
{%- if channel.hasPublish() %}
import org.springframework.cloud.stream.annotation.Output;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageChannel;
{% endif -%}
{%- if channel.hasSubscribe() -%}
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.messaging.SubscribableChannel;;
{% endif -%}
{%- if channel.hasPublish() -%}
import org.springframework.messaging.support.MessageBuilder;
{% endif -%}

{%- if channel.hasSubscribe() -%}
import java.util.function.Consumer;
{% endif %}

@EnableBinding({{className}}.{{bindingClassName}}.class)
public class {{className }} {

{% if channel.hasSubscribe() %}
    Consumer<{{payloadClass}}> callback;
{% endif %}

{% if channel.hasPublish() %}
    @Autowired
    {{bindingClassName}} {{bindingName}};
{% endif %}

{%- if channel.hasSubscribe() %}
    public void setCallback(Consumer<{{payloadClass}}> callback) {
        this.callback = callback;
    }

    @StreamListener({{bindingClassName}}.{{bindingName}}Input)
    public void receive({{payloadClass}} {{lowerPayloadName}}) {
        if (callback != null) {
            callback.accept({{lowerPayloadName}});
        }
    }

{% endif %}
{%- if channel.hasPublish() %}
    public void send({{payloadClass}} {{lowerPayloadName}}) {
        Message<{{payloadClass}}> message = MessageBuilder
            .withPayload({{lowerPayloadName}})
            .build();
        {{bindingName}}.output().send(message);
    }
{% endif %}

    public interface {{bindingClassName}} {
{%- if channel.hasSubscribe() %}
        String {{bindingName}}Input = "{{bindingName}}Input";
{% endif %}
{%- if channel.hasPublish() %}
        String {{bindingName}}Output = "{{bindingName}}Output";
{% endif %}
{%- if channel.hasSubscribe() %}
        @Input({{bindingName}}Input)
        SubscribableChannel input();
{% endif %}
{%- if channel.hasPublish() %}
        @Output({{bindingName}}Output)
        MessageChannel output();
{% endif %}
    }
}


