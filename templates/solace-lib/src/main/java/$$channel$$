{%- set topicInfo = [channelName, channel] | topicInfo %}
{% set className = channel.json()['x-java-class'] -%}
{% include '.partials/java-package' -%}

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.solacesystems.jcsmp.JCSMPFactory;
import com.solacesystems.jcsmp.JCSMPSession;
import com.solacesystems.jcsmp.TextMessage;
import com.solacesystems.jcsmp.Topic;
import com.solacesystems.jcsmp.XMLMessageProducer;

@Component
public class {{ className }} {

    // Channel name: {{topicInfo.channelName}}
    private static final String PUBLISH_TOPIC = "{{ topicInfo.publishTopic }}";
    private static final String SUBSCRIBE_TOPIC = "{{ topicInfo.subscribeTopic }}";

    @Autowired
    private SolaceSession solaceSession;

    private ObjectMapper mapper = new ObjectMapper();
    private TextMessage textMessage = JCSMPFactory.onlyInstance().createMessage(TextMessage.class);

    private XMLMessageProducer producer;

    @PostConstruct
    public void init() throws Exception {
        JCSMPSession session = solaceSession.getSession();
        producer = session.getMessageProducer(new PublishEventHandler());
    }

    private Topic formatTopic({{ topicInfo.functionParamList }}) {
        String topicString = String.format(PUBLISH_TOPIC, {{ topicInfo.functionArgList }} );
        Topic topic = JCSMPFactory.onlyInstance().createTopic(topicString);
        return topic;
    }

{%- for schemaName, schema in asyncapi.components().schemas() %}
{%- set lowerName = schemaName | lowerFirst %}

    public void send{{ schemaName }}({{ schemaName }} {{ lowerName}}, {{ topicInfo.functionParamList }}) throws Exception {
        Topic topic = formatTopic({{ topicInfo.functionArgList }});
        String payload = mapper.writeValueAsString({{ lowerName }});
        textMessage.setText(payload);
        producer.send(textMessage, topic);
    }
    
 {% endfor %}
    public void close() {
        solaceSession.close();
    }

{% for param in topicInfo.params %}
{% if param.enum -%}
    public static enum {{ param.type }} { {{ param.enum }} }
{% endif %}
{% endfor -%}

}

