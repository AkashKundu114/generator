{%- set topicInfo = [channelName, channel] | topicInfo %}
{% set className = channel.json()['x-java-class'] -%}
{% include '.partials/java-package' -%}
{%- set publishMessageClass = channel | publishMessageClass -%}
{%- set publishPayloadClass = channel | publishPayloadClass -%}
{%- set subscribeMessageClass = channel | subscribeMessageClass -%}
{%- set subscribePayloadClass = channel | subscribePayloadClass -%}
{%- set contentType = channel | contentType -%}

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.solacesystems.jcsmp.BytesXMLMessage;
{% if channel.hasPublish() -%}
import com.solacesystems.jcsmp.DeliveryMode;
{% endif -%}
import com.solacesystems.jcsmp.JCSMPException;
import com.solacesystems.jcsmp.JCSMPFactory;
import com.solacesystems.jcsmp.JCSMPSession;
import com.solacesystems.jcsmp.JCSMPStreamingPublishEventHandler;
import com.solacesystems.jcsmp.TextMessage;
import com.solacesystems.jcsmp.Topic;
{% if channel.hasSubscribe() -%}
import com.solacesystems.jcsmp.XMLMessageConsumer;
import com.solacesystems.jcsmp.XMLMessageListener;
{% endif -%}
{% if channel.hasPublish() -%}
import com.solacesystems.jcsmp.XMLMessageProducer;
{%- endif %}

@Component
public class {{ className }} {

    // Channel name: {{topicInfo.channelName}}
{%- if channel.hasPublish() %}
    private static final String PUBLISH_TOPIC = "{{ topicInfo.publishTopic }}";
{%- endif -%}
{%- if channel.hasSubscribe() %}
    private static final String SUBSCRIBE_TOPIC = "{{ topicInfo.subscribeTopic }}";
{%- endif %}

    @Autowired
    private SolaceSession solaceSession;
    private JCSMPSession jcsmpSession;
    private Serializer<{{ publishPayloadClass }}> serializer;
    private TextMessage textMessage = JCSMPFactory.onlyInstance().createMessage(TextMessage.class);
{%- if channel.hasPublish() %}
    private XMLMessageProducer producer;
{%- endif -%}
{%- if channel.hasSubscribe() %}
    XMLMessageConsumer consumer;        
{%- endif %}

    @PostConstruct
    public void init() throws Exception {
        jcsmpSession = solaceSession.getSession();
{%- if contentType %}
        serializer = SerializerFactory.getSerializer("{{ contentType }}", {{ publishPayloadClass }}.class);
{%- else %}
        serializer = SerializerFactory.getSerializer(null, {{ publishPayloadClass }}.class);
{%- endif %}
 
    }
{% if channel.hasPublish() %}
    public void initPublisher(PublishListener publishListener) throws Exception {
    	PublishEventHandler handler = new PublishEventHandler(publishListener);
    	producer = jcsmpSession.getMessageProducer(handler);
        textMessage.setDeliveryMode(DeliveryMode.{{ channel | deliveryMode }});
    }
{%- endif %}
{% if channel.hasSubscribe() %}
    public void subscribe(SubscribeListener listener) throws Exception {
    	MessageListener messageListener = new MessageListener(listener);
    	consumer = jcsmpSession.getMessageConsumer(messageListener);
    	Topic topic = JCSMPFactory.onlyInstance().createTopic(SUBSCRIBE_TOPIC);
    	jcsmpSession.addSubscription(topic);
    	consumer.start();
    }
{%- endif %}
{% if channel.hasPublish() %}
    private Topic formatTopic({{ topicInfo.functionParamList }}) {
        String topicString = String.format(PUBLISH_TOPIC, {{ topicInfo.functionArgList }});
        Topic topic = JCSMPFactory.onlyInstance().createTopic(topicString);
        return topic;
    }

{%- set lowerMessageName = publishMessageClass | lowerFirst %}
{%- set lowerPayloadName = publishPayloadClass | lowerFirst %}

    public void send{{ publishMessageClass }}({{ publishMessageClass }} {{ lowerMessageName }}, {{ topicInfo.functionParamList }}) throws Exception {
        Topic topic = formatTopic({{ topicInfo.functionArgList }});
        {{ publishPayloadClass }} payload = {{ lowerMessageName }}.getPayload();
        String payloadString = serializer.serialize(payload);
        textMessage.setText(payloadString);
        producer.send(textMessage, topic);
    }
   
    public void send{{ publishPayloadClass }}({{ publishPayloadClass }} {{ lowerPayloadName }}, {{ topicInfo.functionParamList }}) throws Exception {
        Topic topic = formatTopic({{ topicInfo.functionArgList }});
        String payloadString = serializer.serialize({{ lowerPayloadName }});
        textMessage.setText(payloadString);
        producer.send(textMessage, topic);
    }
   
{%- endif %}

    public void close() {
{% if channel.hasSubscribe() %}
        if (consumer != null) {
            consumer.close();        
        }

        solaceSession.close();
{% endif %}
    }

{% for param in topicInfo.params -%}
{%- if param.enum %}
    public static enum {{ param.type }} { {{ param.enum }} }
{% endif -%}
{%- endfor -%}
{%- if channel.hasSubscribe() -%}
{%- set lowerMessageName = subscribeMessageClass | lowerFirst %}
    public interface SubscribeListener {
        public void onReceive({{subscribeMessageClass}} {{ lowerMessageName }});
        public void handleException(Exception exception);
    }
    
    class MessageListener implements XMLMessageListener {

        SubscribeListener listener;
        
        public MessageListener(SubscribeListener listener) {
            this.listener = listener;
        }
        
        @Override
        public void onException(JCSMPException exception) {
            listener.handleException(exception);
        }

        @Override
        public void onReceive(BytesXMLMessage bytesMessage) {
            TextMessage textMessage = (TextMessage) bytesMessage;
            {{ subscribePayloadClass }} payload;
            try {
                payload = serializer.deserialize(textMessage.getText());
                {{ subscribeMessageClass }}  {{ lowerMessageName }} = new {{ subscribeMessageClass }}();
                {{ lowerMessageName }}.setPayload(payload);
                {{ lowerMessageName }}.setTopic(bytesMessage.getDestination().getName());
                listener.onReceive({{ lowerMessageName }});
            } catch (Exception exception) {
                listener.handleException(exception);
            }            
        }
    }
{%- endif %}
{%- if channel.hasPublish() %}

    public interface PublishListener {
        public void onResponse(String messageId);
        public void handleException(String messageId, Exception exception, long timestamp);
    }
    
    class PublishEventHandler implements JCSMPStreamingPublishEventHandler {
        
        PublishListener listener;
        
        public PublishEventHandler(PublishListener listener) {
            this.listener = listener;
        }

        @Override
        public void handleError(String messageId, JCSMPException exception, long timestamp) {
            listener.handleException(messageId, exception, timestamp);
        }

        @Override
        public void responseReceived(String messageId) {
            listener.onResponse(messageId);
        }
    }

{%- endif %}
}

